type CategoryStatisticsType {
  label: String!
  total: Int!
}

input ConflictFilter {
  id: IDFilterLookup
}

type ConflictListType {
  id: ID!
  year: Int!
  totalDisplacement: Int
  totalDisplacementSource: String
  newDisplacement: Int
  newDisplacementSource: String
  returns: Int
  returnsSource: String
  localIntegration: Int
  localIntegrationSource: String
  resettlement: Int
  resettlementSource: String
  crossBorderFlight: Int
  crossBorderFlightSource: String
  childrenBornToIdps: Int
  childrenBornToIdpsSource: String
  idpDeaths: Int
  idpDeathsSource: String
  totalDisplacementSince: String
  newDisplacementSince: String
  returnsSince: String
  resettlementSince: String
  localIntegrationSince: String
  crossBorderFlightSince: String
  childrenBornToIdpsSince: String
  idpDeathsSince: String
  country(pagination: OffsetPaginationInput): CountryListType
}

input ConflictStatisticsFilter {
  countries: [ID!]
  startYear: Int
  endYear: Int
  countriesIso3: [String!]
}

type ConflictStatisticsType {
  newDisplacements: Int!
  totalIdps: Int!
  newDisplacementTimeseries: [TimeSeriesStatisticsType!]!
  idpsTimeseries: [TimeSeriesStatisticsType!]!
}

type ConflictType {
  id: ID!
  year: Int!
  totalDisplacement: Int
  totalDisplacementSource: String
  newDisplacement: Int
  newDisplacementSource: String
  returns: Int
  returnsSource: String
  localIntegration: Int
  localIntegrationSource: String
  resettlement: Int
  resettlementSource: String
  crossBorderFlight: Int
  crossBorderFlightSource: String
  childrenBornToIdps: Int
  childrenBornToIdpsSource: String
  idpDeaths: Int
  idpDeathsSource: String
  totalDisplacementSince: String
  newDisplacementSince: String
  returnsSince: String
  resettlementSince: String
  localIntegrationSince: String
  crossBorderFlightSince: String
  childrenBornToIdpsSince: String
  idpDeathsSince: String
  country(pagination: OffsetPaginationInput): CountryListType
}

"""An enumeration."""
enum ContinentEnum {
  EUROPE
  OCEANIA
  AMERICAS
  AFRICA
  ASIA
  ANTARTICA
}

type CountryAdditionalInfoType {
  id: ID!
  year: Int
  totalDisplacement: Int
  totalDisplacementSince: String
  totalDisplacementSource: String
}

input CountryFilter {
  id: IDFilterLookup
  iso3: StrFilterLookup
  name: StrFilterLookup
  idmcNames: StrFilterLookup
  search: String
}

type CountryListType {
  id: ID!
  iso3: String!
  iso2: String!
  name: String!
  idmcNames: String
  idmcContinent: ContinentEnum
  idmcRegion: IdmcRegionEnum
  idmcSubRegion: SubRegionEnum
  wbRegion: WbRegionEnum
  goodPracticeRegion: GoodPracticeRegion
  unPopulationDivisionNames: String
  unitedNationsRegion: UnitedNationsRegionEnum
  isLeastDevelopedCountry: Boolean!
  isSmallIslandDevelopingState: Boolean!
  isIdmcGo2013: Boolean!
  isConflictAffectedSince1970: Boolean!
  isCountryOfficeNrc: Boolean!
  isCountryOfficeIom: Boolean!
  title: String!
  description: String
  essentialLinks: String
  contactPersonDescription: String
  internalDisplacementDescription: String
  displacementDataDescription: String
  boundingBox: [Float!]
  centerPoint: [Float!]
  backgroundImage: FileFieldType
  contactPersonImage: FileFieldType
  countryAdditonalInfo: [CountryAdditionalInfoType!]!
  figureAnalysis: [FigureAnalysisType!]
  goodPracticeRegionLabel: String!
  goodPracticesCount: Int
  idmcContinentLabel: String
  idmcRegionLabel: String!
  idmcSubRegionLabel: String!
  overviews: [OverViewType!]!
  unitedNationsRegionLabel: String!
  wbRegionLabel: String!
}

type CountryType {
  id: ID!
  iso3: String!
  iso2: String!
  name: String!
  idmcNames: String
  idmcContinent: ContinentEnum
  idmcRegion: IdmcRegionEnum
  idmcSubRegion: SubRegionEnum
  wbRegion: WbRegionEnum
  goodPracticeRegion: GoodPracticeRegion
  unPopulationDivisionNames: String
  unitedNationsRegion: UnitedNationsRegionEnum
  isLeastDevelopedCountry: Boolean!
  isSmallIslandDevelopingState: Boolean!
  isIdmcGo2013: Boolean!
  isConflictAffectedSince1970: Boolean!
  isCountryOfficeNrc: Boolean!
  isCountryOfficeIom: Boolean!
  title: String!
  description: String
  essentialLinks: String
  contactPersonDescription: String
  internalDisplacementDescription: String
  displacementDataDescription: String
  boundingBox: [Float!]
  centerPoint: [Float!]
  backgroundImage: FileFieldType
  contactPersonImage: FileFieldType
  countryAdditonalInfo: [CountryAdditionalInfoType!]!
  figureAnalysis: [FigureAnalysisType!]
  goodPracticeRegionLabel: String!
  goodPracticesCount: Int
  idmcContinentLabel: String
  idmcRegionLabel: String!
  idmcSubRegionLabel: String!
  overviews: [OverViewType!]!
  unitedNationsRegionLabel: String!
  wbRegionLabel: String!
}

"""An enumeration."""
enum CrisisType {
  CONFLICT
  DISASTER
}

"""A generic type to return error messages"""
scalar CustomErrorType

"""Date (isoformat)"""
scalar Date

"""Date with time (isoformat)"""
scalar DateTime

type DisasterCountryType {
  id: ID!
  iso3: String!
  countryName: String!
}

input DisasterFilter {
  id: IDFilterLookup
}

type DisasterListType {
  id: ID!
  year: Int!
  glideNumber: String
  eventName: String
  locationText: String
  startDate: Date
  startDateAccuracy: String
  endDate: Date
  endDateAccuracy: String
  hazardCategory: String
  hazardSubCategory: String
  hazardSubType: String
  hazardType: String
  newDisplacement: Int
  newDisplacementSource: String
  newDisplacementSince: String
  country(pagination: OffsetPaginationInput): CountryListType
}

input DisasterStatisticsFilter {
  categories: [String!]
  countries: [ID!]
  startYear: Int
  endYear: Int
  countriesIso3: [String!]
  regions: [IdmcRegionEnum!]
}

type DisasterStatisticsType {
  newDisplacements: Int!
  totalEvents: Int!
  timeseries: [DisasterTimeSeriesStatisticsType!]!
  categories: [CategoryStatisticsType!]!
}

type DisasterTimeSeriesStatisticsType {
  year: String!
  total: Int!
  country: DisasterCountryType!
}

type DisasterType {
  id: ID!
  year: Int!
  glideNumber: String
  eventName: String
  locationText: String
  startDate: Date
  startDateAccuracy: String
  endDate: Date
  endDateAccuracy: String
  hazardCategory: String
  hazardSubCategory: String
  hazardSubType: String
  hazardType: String
  newDisplacement: Int
  newDisplacementSource: String
  newDisplacementSince: String
  country(pagination: OffsetPaginationInput): CountryListType
}

type DriversOfDisplacementType {
  id: ID!
  name: String!
}

type FaqListType {
  id: ID!
  question: String!
  answer: String!
}

type FaqType {
  id: ID!
  question: String!
  answer: String!
}

type FigureAnalysisType {
  id: ID!
  year: Int!
  crisisType: CrisisType!
  ndFigures: Int!
  ndMethodologyAndSources: String!
  ndCaveatsAndChallenges: String!
  idpFigures: Int!
  idpMethodologyAndSources: String!
  idpCaveatsAndChallenges: String!
  createdAt: Date!
  updatedAt: Date!
}

type FileFieldType {
  name: String!
  url: String!
}

type FocusAreaType {
  id: ID!
  name: String!
}

type GalleryType {
  id: ID!
  youtubeVideoUrl: String
  caption: String
  image: FileFieldType
}

input GoodPracticeFilter {
  search: String
  types: [TypeEnum!]
  driversOfDisplacements: [ID!]
  stages: [StageTypeEnum!]
  countries: [ID!]
  regions: [GoodPracticeRegion!]
  focusArea: [ID!]
  startYear: Int
  endYear: Int
  isPublic: Boolean
  recommendedGoodPractice: ID
}

type GoodPracticeFilterChoiceType {
  type: [TypeEnumGenericEnumValue!]
  driversOfDisplacement: [DriversOfDisplacementType!]
  stage: [StageTypeEnumGenericEnumValue!]
  focusArea: [FocusAreaType!]
  regions: [GoodPracticeRegionGenericEnumValue!]
  countries: [GoodPracticeFilterCountryChoiceType!]
  tags: [TagType!]
  startYear: Int!
  endYear: Int!
}

type GoodPracticeFilterCountryChoiceType {
  id: ID!
  name: String!
}

input GoodPracticeInputType {
  startYear: Int!
  endYear: Int = null
  captcha: String!
  type: TypeEnum = UNKNOWN
  stage: StageTypeEnum = UNKNOWN
  countries: [ID!]!
  driversOfDisplacement: [ID!]
  focusArea: [ID!]
  tags: [ID!]
  titleEn: String = null
  descriptionEn: String = null
  mediaAndResourceLinksEn: String = null
  implementingEntityEn: String = null
  titleFr: String = null
  descriptionFr: String = null
  mediaAndResourceLinksFr: String = null
  implementingEntityFr: String = null
  contactName: String!
  contactEmail: String!
  whatMakesThisPromisingPractice: String = null
  descriptionOfKeyLessonsLearned: String = null
  underReview: Boolean = true
}

input GoodPracticeOrder {
  id: Ordering
  title: Ordering
  description: Ordering
  focusArea: Ordering
  isPublished: Ordering
  pageViewedCount: Ordering
  publishedDate: Ordering
  updatedAt: Ordering
}

type GoodPracticePageViewCountType {
  id: ID!
  pageViewedCount: Int!
}

"""An enumeration."""
enum GoodPracticeRegion {
  THE_AMERICAS
  SUB_SAHARAN_AFRICA
  SOUTH_ASIA
  MIDDLE_EAST_AND_NORTH_AFRICA
  EAST_ASIA_AND_THE_PACIFIC
  EUROPE_AND_CENTRAL_ASIA
}

type GoodPracticeRegionGenericEnumValue {
  name: String!
  label: String!
}

type GoodPracticeType {
  id: ID!
  title: String!
  description: String
  type: String!
  stage: String!
  isPublished: Boolean!
  publishedDate: DateTime
  mediaAndResourceLinks: String
  startYear: Int!
  endYear: Int
  pageViewedCount: Int!
  implementingEntity: String!
  contactName: String!
  contactEmail: String!
  whatMakesThisPromisingPractice: String
  descriptionOfKeyLessonsLearned: String
  underReview: Boolean!
  isTranslated: Boolean!
  countries: [CountryType!]!
  driverOfDisplacement: [DriversOfDisplacementType!]
  focusArea: [FocusAreaType!]
  gallery: [GalleryType!]!
  image: FileFieldType
  stageLabel: String!
  tags: [TagType!]
  typeLabel: String
}

type GoodPracticeTypeMutationResponse {
  ok: Boolean!
  errors: CustomErrorType
  data: GoodPracticeType
}

input IDFilterLookup {
  exact: ID
  iExact: ID
  contains: ID
  iContains: ID
  inList: [ID!]
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  startsWith: ID
  iStartsWith: ID
  endsWith: ID
  iEndsWith: ID
  range: [ID!]
  isNull: Boolean
  regex: String
  iRegex: String
}

"""An enumeration."""
enum IdmcRegionEnum {
  AUSTRALIA_AND_NZ
  CARIBBEAN
  CENTRAL_AFRICA
  CENTRAL_ASIA
  EAST_ASIA
  EASTERN_EUROPE
  HORN_OF_AFRICA
  LATIN_AMERICA
  MELANESIA
  MICRONESIA
  NORTH_AMERICA
  NORTHERN_AFRICA
  NORTH_WEST_AND_CENTRAL_EUROPE
  POLYNESIA
  SOUTH_ASIA
  SOUTH_EAST_ASIA
  SOUTHERN_AFRICA
  SOUTHERN_EUROPE
  WESTERN_AFRICA
  WESTERN_ASIA
}

type Mutation {
  incrementPageViewedCount(id: ID!): GoodPracticePageViewCountType!
  publicCreateGoodPractice(input: GoodPracticeInputType!): GoodPracticeTypeMutationResponse!
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

enum Ordering {
  ASC
  DESC
}

type OverViewType {
  id: ID!
  description: String
  year: Int!
  updatedAt: DateTime!
}

type PaginationBaseType {
  results: [GoodPracticeType!]!
  totalCount: Int!
}

type Query {
  conflicts(filters: ConflictFilter, pagination: OffsetPaginationInput): [ConflictListType!]!
  disasters(filters: DisasterFilter, pagination: OffsetPaginationInput): [DisasterListType!]!
  countries(filters: CountryFilter, pagination: OffsetPaginationInput): [CountryListType!]!
  conflict(pk: ID): ConflictType!
  disaster(pk: ID): DisasterType!
  country(pk: ID = null, iso3: String = null): CountryType!
  disasterStatistics(filters: DisasterStatisticsFilter!): DisasterStatisticsType!
  conflictStatistics(filters: ConflictStatisticsFilter!): ConflictStatisticsType!
  tags(pagination: OffsetPaginationInput): [TagType!]!
  driversOfDisplacements(pagination: OffsetPaginationInput): [DriversOfDisplacementType!]!
  focusAreas(pagination: OffsetPaginationInput): [FocusAreaType!]!
  faq(pk: ID!): FaqType!
  goodPractice(pk: ID!): GoodPracticeType!
  faqs: [FaqListType!]!
  goodPractices(pagination: OffsetPaginationInput!, ordering: GoodPracticeOrder!, filters: GoodPracticeFilter = null): PaginationBaseType!
  goodPracticeFilterChoices: GoodPracticeFilterChoiceType!
  goodPracticeTypeEnums: [TypeEnumGenericEnumValue!]!
  goodPracticeStageTypeEnums: [StageTypeEnumGenericEnumValue!]!
  staticPages(filters: StaticPageFilter, pagination: OffsetPaginationInput): [StaticPageListType!]!
  staticPage(pk: ID): StaticPageType!
}

"""An enumeration."""
enum StageTypeEnum {
  PROMISING
  ADVANCED
  SUCCESSFUL
  UNKNOWN
}

type StageTypeEnumGenericEnumValue {
  name: String!
  label: String!
}

input StaticPageFilter {
  staticPageTypes: [StaticPageTypeEnum!]
}

type StaticPageListType {
  id: ID!
  type: StaticPageTypeEnum!
  description: String
}

type StaticPageType {
  id: ID!
  type: StaticPageTypeEnum!
  description: String
}

"""An enumeration."""
enum StaticPageTypeEnum {
  GOOD_PRACTICE_LISTING_PAGE
  SUBMIT_GOOD_PRACTICE
  GOOD_PRACTICE_CONTACT_INFORMATION
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
}

"""An enumeration."""
enum SubRegionEnum {
  CARIBBEAN
  LATIN_AMERICA
  MIDDLE_EAST
  SOUTH_CAUCASUS
}

type TagType {
  id: ID!
  name: String!
}

type TimeSeriesStatisticsType {
  year: String!
  total: Int!
}

"""An enumeration."""
enum TypeEnum {
  RISK_REDUCTION_AND_PREVENTION
  PROTECTION_AND_ASSISTANCE_AND_DURABLE_SOLUTIONS
  STRENGTHENING_POLICY_AND_LEGAL_FRAMEWORKS
  GOVERNANCE_CAPACITY_AND_INSTITUTIONAL_SET_UP
  DISPLACEMENT_MONITORING
  UNKNOWN
}

type TypeEnumGenericEnumValue {
  name: String!
  label: String!
}

"""An enumeration."""
enum UnitedNationsRegionEnum {
  ASIA
  SOUTHERN_ASIA
  EUROPE
  EUROPE_AND_SOUTHERN_ASIA
  ARFRICA
  OCEANIA
  SUB_SAHARAN_AFRICA
  MIDDLE_AFRICA
  AMERICAS
  LATIN_AMERICA_AND__THE_CARIBBEAN
  SOUTH_AMERICA
  AUSTRALIA_AND_NEW_ZEALAND
  WESTERN_EUROPE
  CENTRAL_AMERICA
  NORTHEN_AMERICA
  SOUTH_EASTERN_ASIA
  EASTERN_AFRICA
  EASTERN_ASIA
  NORTHERN_EUROPE
}

"""An enumeration."""
enum WbRegionEnum {
  EAST_ASIA_AND_PACIFIC
  EUROPE_AND_CENTRAL_ASIA
  HIGH_INCOME_OECD_MEMBER
  HIGH_INCOME_NON_OECD_MEMBER
  LATIN_AMERICA_AND_THE_CARIBBEAN
  MIDDLE_EAST_AND_NORTH_AFRICA
  SOUTH_ASIA
  SUB_SAHARAN_AFRICA
}